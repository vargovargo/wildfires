accept=c('text/csv', 'text/comma-separated-values,text/plain', '.csv')),
# Download Button
downloadLink("downloadPOPexample", "Download Sample Populations")
),
mainPanel(
# Output: Tabset w/ plot, summary, and table ----
tabsetPanel(type = "tabs",
tabPanel("Introduction", textOutput("This is a web interface for the Intergrated Transport Health Impact Model (ITHIM),")),
tabPanel("Input - Physical Activity", plotOutput('PA')),
tabPanel("Input - Disease Burden", plotOutput('burden')),
tabPanel("Input - Population",   plotOutput('pop')),
tabPanel("Baseline - Summary", verbatimTextOutput('summary'))
)
)
))
server <- function(input, output, session) {
##### PHYSICAL ACTIVITY #######
output$PA <- renderPlot({
# input$file1 will be NULL initially. After the user selects
# and uploads a file, it will be a data frame with 'name',
# 'size', 'type', and 'datapath' columns. The 'datapath'
# column will contain the local filenames where the data can
# be found.
inFilePA <- input$file1
if (is.null(inFilePA))
return(NULL)
PAfile <- read.csv(inFilePA$datapath, header = T, sep=",")
ggplot(PAfile, aes(x=ageClass, y=value, fill=sex)) + geom_bar(stat="identity", position="dodge") +
facet_grid(mode ~ .) +
ggtitle("Age-Sex Active Transport Times") +
ylab("Minutes per Week")
})
# Downloadable csv of selected dataset ----
output$downloadPAexample <- downloadHandler(
filename = "ActiveTransportTime.csv",
content = function(file) {
write.csv(PAexample, file, row.names = FALSE)
}
)
##### BURDEN ###########
output$burden <- renderPlot({
# input$file1 will be NULL initially. After the user selects
# and uploads a file, it will be a data frame with 'name',
# 'size', 'type', and 'datapath' columns. The 'datapath'
# column will contain the local filenames where the data can
# be found.
inFileBurden <- input$file2
if (is.null(inFileBurden))
return(NULL)
burdenFile <- read.csv(inFileBurden$datapath, header = T, sep=",")
ggplot(burdenFile, aes(x=ageClass, y=value, fill=sex)) + geom_bar(stat="identity", position="dodge") +
facet_grid(burdenType ~ disease) +
ggtitle("Age-Sex Baseline Disease Burdens")
})
# Downloadable csv of selected dataset ----
output$downloadGBDexample <- downloadHandler(
filename = "PortlandBurden.csv",
content = function(file) {
write.csv(GBDexample, file, row.names = FALSE)
}
)
##### POPULATION ###########
output$pop <- renderPlot({
# input$file1 will be NULL initially. After the user selects
# and uploads a file, it will be a data frame with 'name',
# 'size', 'type', and 'datapath' columns. The 'datapath'
# column will contain the local filenames where the data can
# be found.
inFilePOP <- input$file3
if (is.null(inFilePOP))
return(NULL)
POPfile <- read.csv(inFilePOP$datapath, header = T, sep=",")
ggplot(POPfile, aes(x=ageClass, y=value, fill=sex)) + geom_bar(stat="identity", position="dodge") +
ggtitle("Age-Sex Population Distribution")
})
# Downloadable csv of selected dataset ----
output$downloadPOPexample <- downloadHandler(
filename = "PortlandPopulation.csv",
content = function(file) {
write.csv(GBDexample, file, row.names = FALSE)
}
)
##### summary in create ITHIM File ###########
output$summary <- renderText({
inFilePA <- input$file1
inFileBUR <- input$file2
inFilePOP <- input$file3
if (is.null(inFilePA) | is.null(inFileBUR) | is.null(inFilePOP))
return(NULL)
createITHIM(activeTransportFile = inFilePA, GBDFile = inFileBUR, FFile = inFilePOP) %>% print()
})
# createITHIM(activeTransportFile = PAfile, GBDFile = burdenFile, FFile = POPfile)
}
shinyApp(server = server, ui = ui)
runApp('GitHub/ITHIM-IO')
runApp('GitHub/ITHIM-IO')
library(tidyverse)
read.csv("https://raw.githubusercontent.com/vargovargo/CHVIr/master/heatCHVIcounty.csv", header=T)
read.csv("https://raw.githubusercontent.com/vargovargo/CHVIr/master/heatCHVIcounty.csv", header=T) %>%
spread(key = Year, value = Year)
read.csv("https://raw.githubusercontent.com/vargovargo/CHVIr/master/heatCHVIcounty.csv", header=T) %>%
spread(key = Year, value = projection)
read.csv("https://raw.githubusercontent.com/vargovargo/CHVIr/master/heatCHVIcounty.csv", header=T) %>%
spread(key = Year, value = Extreme.Heat.Days)
read.csv("https://raw.githubusercontent.com/vargovargo/CHVIr/master/heatCHVIcounty.csv", header=T) %>%
spread(key = Year, value = Extreme.Heat.Days) %>%
write.csv("~/CHVI_copy/shapes/countyHeatDays.csv")
run(https://raw.githubusercontent.com/ITHIM/ITHIM-IO/master/app.R)
print(https://raw.githubusercontent.com/ITHIM/ITHIM-IO/master/app.R)
https://raw.githubusercontent.com/ITHIM/ITHIM-IO/master/app.R
source(https://raw.githubusercontent.com/ITHIM/ITHIM-IO/master/app.R)
source("https://raw.githubusercontent.com/ITHIM/ITHIM-IO/master/app.R")
source("https://raw.githubusercontent.com/ITHIM/ITHIM-IO/master/app.R")
library(shiny)
library(tidyverse)
devtools::install_github("ITHIM/ITHIM", ref="devel")
library("ITHIM")
PAfileName <- "https://raw.githubusercontent.com/ITHIM/ITHIM/devel/inst/activeTransportTime.csv"
BURfileName <- "https://raw.githubusercontent.com/ITHIM/ITHIM/devel/inst/burden.portland.csv"
POPfileName <- "https://raw.githubusercontent.com/ITHIM/ITHIM/devel/inst/F.portland.csv"
PAexample <- read.csv(PAfileName, header=T)
BURexample <- read.csv(BURfileName, header=T)
POPexample <- read.csv(POPfileName, header=T)
ui <- shinyUI(pageWithSidebar(
headerPanel("ITHIM Physical Activity Module Demo"),
sidebarPanel(
####### PHYSICAL ACTIVITY ########
# Download Button
downloadLink("downloadPAexample", "Download Sample Transport Times"),
# Upload PA Data
fileInput('file1', 'Choose Physical Activity File (csv)',
accept=c('text/csv', 'text/comma-separated-values,text/plain', '.csv')),
####### BURDEN ########
# Download Button
downloadLink("downloadBURexample", "Download Sample Disease Burdens"),
# Upload burden Data
fileInput('file2', 'Choose Disease Burden File (csv)',
accept=c('text/csv', 'text/comma-separated-values,text/plain', '.csv')),
####### POP ########
# Download Button
downloadLink("downloadPOPexample", "Download Sample Populations"),
# Upload Pop Data
fileInput('file3', 'Choose Population File (csv)',
accept=c('text/csv', 'text/comma-separated-values,text/plain', '.csv'))
),
mainPanel(
# Output: Tabset w/ plot, summary, and table ----
tabsetPanel(type = "tabs",
tabPanel("Introduction", textOutput("This is a web interface for the Intergrated Transport Health Impact Model (ITHIM),")),
tabPanel("Input - Physical Activity", plotOutput('PA')),
tabPanel("Input - Disease Burden", plotOutput('burden')),
tabPanel("Input - Population",   plotOutput('pop')),
tabPanel("Baseline - Summary", verbatimTextOutput('summary'))
)
)
))
server <- function(input, output, session) {
##### PHYSICAL ACTIVITY #######
output$PA <- renderPlot({
# input$file1 will be NULL initially. After the user selects
# and uploads a file, it will be a data frame with 'name',
# 'size', 'type', and 'datapath' columns. The 'datapath'
# column will contain the local filenames where the data can
# be found.
inFilePA <- input$file1
if (is.null(inFilePA))
return(NULL)
PAfile <- read.csv(inFilePA$datapath, header = T, sep=",")
ggplot(PAfile, aes(x=ageClass, y=value, fill=sex)) + geom_bar(stat="identity", position="dodge") +
facet_grid(mode ~ .) +
ggtitle("Age-Sex Active Transport Times") +
ylab("Minutes per Week")
})
# Downloadable csv of selected dataset ----
output$downloadPAexample <- downloadHandler(
filename = "ActiveTransportTime.csv",
content = function(file) {
write.csv(PAexample, file, row.names = FALSE)
}
)
##### BURDEN ###########
output$burden <- renderPlot({
# input$file1 will be NULL initially. After the user selects
# and uploads a file, it will be a data frame with 'name',
# 'size', 'type', and 'datapath' columns. The 'datapath'
# column will contain the local filenames where the data can
# be found.
inFileBurden <- input$file2
if (is.null(inFileBurden))
return(NULL)
burdenFile <- read.csv(inFileBurden$datapath, header = T, sep=",")
ggplot(burdenFile, aes(x=ageClass, y=value, fill=sex)) + geom_bar(stat="identity", position="dodge") +
facet_grid(burdenType ~ disease) +
ggtitle("Age-Sex Baseline Disease Burdens")
})
# Downloadable csv of selected dataset ----
output$downloadBURexample <- downloadHandler(
filename = "PortlandBurden.csv",
content = function(file) {
write.csv(BURexample, file, row.names = FALSE)
}
)
##### POPULATION ###########
output$pop <- renderPlot({
# input$file1 will be NULL initially. After the user selects
# and uploads a file, it will be a data frame with 'name',
# 'size', 'type', and 'datapath' columns. The 'datapath'
# column will contain the local filenames where the data can
# be found.
inFilePOP <- input$file3
if (is.null(inFilePOP))
return(NULL)
POPfile <- read.csv(inFilePOP$datapath, header = T, sep=",")
ggplot(POPfile, aes(x=ageClass, y=value, fill=sex)) + geom_bar(stat="identity", position="dodge") +
ggtitle("Age-Sex Population Distribution")
})
# Downloadable csv of selected dataset ----
output$downloadPOPexample <- downloadHandler(
filename = "PortlandPopulation.csv",
content = function(file) {
write.csv(POPexample, file, row.names = FALSE)
}
)
##### summary in create ITHIM File ###########
output$summary <- renderText({
inFilePA <- ifelse(is.null(input$file1), PAexample, input$file1)
inFileBUR <- ifelse(is.null(input$file2), BURexample, input$file2)
inFilePOP <- ifelse(is.null(input$file3), POPexample, input$file3)
# baseline <- createITHIM(activeTransportFile = inFilePA, GBDFile = inFileBUR, FFile = inFilePOP)
baseline <- createITHIM(activeTransportFile = PAfileName, GBDFile = BURfileName, FFile = POPfileName)
print(baseline)
})
}
shinyApp(server = server, ui = ui)
source({library(shiny)
library(tidyverse)
devtools::install_github("ITHIM/ITHIM", ref="devel")
library("ITHIM")
PAfileName <- "https://raw.githubusercontent.com/ITHIM/ITHIM/devel/inst/activeTransportTime.csv"
BURfileName <- "https://raw.githubusercontent.com/ITHIM/ITHIM/devel/inst/burden.portland.csv"
POPfileName <- "https://raw.githubusercontent.com/ITHIM/ITHIM/devel/inst/F.portland.csv"
PAexample <- read.csv(PAfileName, header=T)
BURexample <- read.csv(BURfileName, header=T)
POPexample <- read.csv(POPfileName, header=T)
ui <- shinyUI(pageWithSidebar(
headerPanel("ITHIM Physical Activity Module Demo"),
sidebarPanel(
####### PHYSICAL ACTIVITY ########
# Download Button
downloadLink("downloadPAexample", "Download Sample Transport Times"),
# Upload PA Data
fileInput('file1', 'Choose Physical Activity File (csv)',
accept=c('text/csv', 'text/comma-separated-values,text/plain', '.csv')),
####### BURDEN ########
# Download Button
downloadLink("downloadBURexample", "Download Sample Disease Burdens"),
# Upload burden Data
fileInput('file2', 'Choose Disease Burden File (csv)',
accept=c('text/csv', 'text/comma-separated-values,text/plain', '.csv')),
####### POP ########
# Download Button
downloadLink("downloadPOPexample", "Download Sample Populations"),
# Upload Pop Data
fileInput('file3', 'Choose Population File (csv)',
accept=c('text/csv', 'text/comma-separated-values,text/plain', '.csv'))
),
mainPanel(
# Output: Tabset w/ plot, summary, and table ----
tabsetPanel(type = "tabs",
tabPanel("Introduction", textOutput("This is a web interface for the Intergrated Transport Health Impact Model (ITHIM),")),
tabPanel("Input - Physical Activity", plotOutput('PA')),
tabPanel("Input - Disease Burden", plotOutput('burden')),
tabPanel("Input - Population",   plotOutput('pop')),
tabPanel("Baseline - Summary", verbatimTextOutput('summary'))
)
)
))
server <- function(input, output, session) {
##### PHYSICAL ACTIVITY #######
output$PA <- renderPlot({
# input$file1 will be NULL initially. After the user selects
# and uploads a file, it will be a data frame with 'name',
# 'size', 'type', and 'datapath' columns. The 'datapath'
# column will contain the local filenames where the data can
# be found.
inFilePA <- input$file1
if (is.null(inFilePA))
return(NULL)
PAfile <- read.csv(inFilePA$datapath, header = T, sep=",")
ggplot(PAfile, aes(x=ageClass, y=value, fill=sex)) + geom_bar(stat="identity", position="dodge") +
facet_grid(mode ~ .) +
ggtitle("Age-Sex Active Transport Times") +
ylab("Minutes per Week")
})
# Downloadable csv of selected dataset ----
output$downloadPAexample <- downloadHandler(
filename = "ActiveTransportTime.csv",
content = function(file) {
write.csv(PAexample, file, row.names = FALSE)
}
)
##### BURDEN ###########
output$burden <- renderPlot({
# input$file1 will be NULL initially. After the user selects
# and uploads a file, it will be a data frame with 'name',
# 'size', 'type', and 'datapath' columns. The 'datapath'
# column will contain the local filenames where the data can
# be found.
inFileBurden <- input$file2
if (is.null(inFileBurden))
return(NULL)
burdenFile <- read.csv(inFileBurden$datapath, header = T, sep=",")
ggplot(burdenFile, aes(x=ageClass, y=value, fill=sex)) + geom_bar(stat="identity", position="dodge") +
facet_grid(burdenType ~ disease) +
ggtitle("Age-Sex Baseline Disease Burdens")
})
# Downloadable csv of selected dataset ----
output$downloadBURexample <- downloadHandler(
filename = "PortlandBurden.csv",
content = function(file) {
write.csv(BURexample, file, row.names = FALSE)
}
)
##### POPULATION ###########
output$pop <- renderPlot({
# input$file1 will be NULL initially. After the user selects
# and uploads a file, it will be a data frame with 'name',
# 'size', 'type', and 'datapath' columns. The 'datapath'
# column will contain the local filenames where the data can
# be found.
inFilePOP <- input$file3
if (is.null(inFilePOP))
return(NULL)
POPfile <- read.csv(inFilePOP$datapath, header = T, sep=",")
ggplot(POPfile, aes(x=ageClass, y=value, fill=sex)) + geom_bar(stat="identity", position="dodge") +
ggtitle("Age-Sex Population Distribution")
})
# Downloadable csv of selected dataset ----
output$downloadPOPexample <- downloadHandler(
filename = "PortlandPopulation.csv",
content = function(file) {
write.csv(POPexample, file, row.names = FALSE)
}
)
##### summary in create ITHIM File ###########
output$summary <- renderText({
inFilePA <- ifelse(is.null(input$file1), PAexample, input$file1)
inFileBUR <- ifelse(is.null(input$file2), BURexample, input$file2)
inFilePOP <- ifelse(is.null(input$file3), POPexample, input$file3)
# baseline <- createITHIM(activeTransportFile = inFilePA, GBDFile = inFileBUR, FFile = inFilePOP)
baseline <- createITHIM(activeTransportFile = PAfileName, GBDFile = BURfileName, FFile = POPfileName)
print(baseline)
})
}
shinyApp(server = server, ui = ui)})
shiny::runApp('GitHub/shinyLearning')
output$plot <- renderPlot({
WFdata() %>%
filter(period != "between") %>%
group_by(period, lon, lat) %>%
summarise(mean_Ha_burned = mean(hectares, na.rm=T)) %>%
ggplot(aes(x=lon, y=lat, color=mean_Ha_burned)) + geom_point() + facet_grid(.~ period) +
scale_colour_gradient(low = "white", high = "red")
})
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(ncdf4)
library(tidyverse)
locationData <- read.csv("https://raw.githubusercontent.com/vargovargo/wildfires/master/LOCAcounties.csv", header=T) %>%
select(lon, lat, County, ClimateRegion)
popMat <- c("L","bau","H")
names(popMat) <- c("Low","Central (bau)","High")
rcpMat <- c("45","85")
names(rcpMat) <- c("RCP4.5 (emissions peak 2040, stabiliazation by 2100)","RCP8.5 (emissions continue to rise throughout the 21st century)")
modelMat <- c("CanESM2","CNRM-CM5","HadGEM2-ES","MIROC5")
names(modelMat) <- c("CanESM2 (average)", "CNRM-CM5 (Cool/Wet)","HadGEM2-ES (Warm/Dry)","MIROC5 (Complement/Covers a range of outputs)")
process_single_nc <- function(modelVar, rcpVar, popVar){
model <- modelMat[modelVar]
rcp <- rcpMat[rcpVar]
pop <- popMat[popVar]
dname = "hectares"
ncdfURL <- paste0("http://albers.cnr.berkeley.edu/data/ucmerced/wildfire/",model,"/rcp",rcp,"/",model,"_",rcp,"_AA.all.",pop,".mu.nc")
dest <-  paste0("~/",model,"_",rcp,"_AA.all.",pop,".mu.nc")
download.file(url=ncdfURL,destfile=dest, mode = "wb")
ncin <- nc_open(dest)
# store values from variables and atributes
attributes(ncin$dim)$names
nc_lat <- ncvar_get(ncin, "lat")
n_lat <- dim(nc_lat)
nc_lon <- ncvar_get(ncin, "lon")
n_lon <- dim(nc_lon)
nc_year <- ncvar_get(ncin, "time")+1953
n_year <- dim(nc_year)
# get hectares
tmp_array <- ncvar_get(ncin,dname)
dlname <- ncatt_get(ncin,dname,"long_name")
dunits <- ncatt_get(ncin,dname,"units")
fillvalue <- ncatt_get(ncin,dname,"_FillValue")
dim(tmp_array)
# get global attributes
# title <- ncatt_get(ncin,0,"title")
# institution <- ncatt_get(ncin,0,"institution")
# datasource <- ncatt_get(ncin,0,"source")
# references <- ncatt_get(ncin,0,"references")
# history <- ncatt_get(ncin,0,"history")
# Conventions <- ncatt_get(ncin,0,"Conventions")
nc_close(ncin)
# replace netCDF fill values with NA's
tmp_array[tmp_array==fillvalue$value] <- NA
# check number of missing data values
# length(na.omit(as.vector(tmp_array[,,1])))
# dimnames(tmp_array) <-list(lon=nc_lon, lat=nc_lat, year=nc_year)
bar <- data.frame(expand.grid(lon = nc_lon, lat = nc_lat)) %>%
cbind(matrix(as.vector(tmp_array), nrow = n_lon*n_lat, ncol = n_year)) %>%
mutate(model=model, scenario = rcp, population = pop) %>%
select(model, scenario, population, lon, lat, 3:150)
names(bar) <- c("model","scenario","population","lon","lat",1954:2100)
CAonly <- inner_join(bar, locationData) %>%
gather(6:152, key = "year", value = "hectares") %>%
mutate(year = as.integer(as.character(year))) %>%
mutate(period = factor(ifelse(year %in% c(1961:1990),"baseline (1961-1990)",
ifelse(year %in% c(2000:2020), "early (2000-2020)",
ifelse(year %in% c(2040:2060),"mid-century (2040-2060)",
ifelse(year %in% c(2080:2100), "late-century (2080-2100)", "between")))),
levels = c("baseline (1961-1990)","early (2000-2020)","mid-century (2040-2060)","late-century (2080-2100)","between"))) %>%
mutate(climateModel = factor(ifelse(model == "CanESM2","CanESM2 (average)",
ifelse(model == "CNRM-CM5","CNRM-CM5 (Cool/Wet)",
ifelse(model == "HadGEM2-ES","HadGEM2-ES (Warm/Dry)","MIROC5 (Complement/Covers a range of outputs"))),
levels = c("CanESM2 (average)", "CNRM-CM5 (Cool/Wet)","HadGEM2-ES (Warm/Dry)","MIROC5 (Complement/Covers a range of outputs)")),
RCP = factor(ifelse(scenario == "45", "RCP4.5 (emissions peak 2040, stabiliazation by 2100)","RCP8.5 (emissions continue to rise throughout the 21st century)"),
levels = c("RCP4.5 (emissions peak 2040, stabiliazation by 2100)","emissions continue to rise throughout the 21st century")),
PopulationGrowth = factor(ifelse(population == "AA.all.bau.mu.nc","Central Projection",
ifelse(population == "AA.all.L.mu.nc","Low Projection","High Projection")),
levels = c("Low Projection", "Central Projection","High Projection")))
return(CAonly)
}
library(shiny)
ui <- fluidPage(
# Application title
titlePanel("Projected California Wildfires Vizualization"),
# Sidebar with a radio input for model, RCP, and population
sidebarLayout(
sidebarPanel(
radioButtons("modelVar",
"Select a Climate Model",
c("CanESM2 (average)", "CNRM-CM5 (Cool/Wet)","HadGEM2-ES (Warm/Dry)","MIROC5 (Complement/Covers a range of outputs)")),
radioButtons("rcpVar",
"Select an Emissions Scenario",
c("RCP4.5 (emissions peak 2040, stabiliazation by 2100)","RCP8.5 (emissions continue to rise throughout the 21st century)")),
radioButtons("popVar",
"Select a Population Projection",
c("Low","Central (bau)","High")),
# Download Button
downloadButton("downloadWFcsv", "Download csv")
),
# Show a plot of the generated distribution
mainPanel(
# Output: Tabset w/ plot, summary, and table ----
tabsetPanel(type = "tabs",
tabPanel("Plot", plotOutput("plot")),
tabPanel("Graph", plotOutput("graph")),
tabPanel("Table", tableOutput("table"))
)
)
)
)
output$table <- renderTable({
WFdata() %>%
filter(period != "between") %>%
group_by(County, ClimateRegion, period) %>%
summarise(mean_Ha_burned = mean(hectares, na.rm=T)) %>%
spread(key = period, value = mean_Ha_burned)
})
server <- function(input, output) {
output$table <- renderTable({
WFdata() %>%
filter(period != "between") %>%
group_by(County, ClimateRegion, period) %>%
summarise(mean_Ha_burned = mean(hectares, na.rm=T)) %>%
spread(key = period, value = mean_Ha_burned)
})
WFdata <- reactive({
process_single_nc(modelVar = input$modelVar, rcpVar = input$rcpVar, popVar = input$popVar)
})
output$graph <- renderPlot({
ggplot(WFdata(), aes(x=year, y=hectares, color=ClimateRegion)) + geom_smooth()
})
output$plot <- renderPlot({
WFdata() %>%
filter(period != "between") %>%
group_by(period, lon, lat) %>%
summarise(mean_Ha_burned = mean(hectares, na.rm=T)) %>%
ggplot(aes(x=lon, y=lat, color=mean_Ha_burned)) + geom_point() + facet_grid(.~ period) +
scale_colour_gradient(low = "white", high = "red")
})
# Downloadable csv of selected dataset ----
output$downloadWFcsv <- downloadHandler(
filename = paste0("CA_wildfire_",names(WFdata())$model,".csv"),
content = function(file) {
write.csv(BURexample, file, row.names = FALSE)
}
)
}
shinyApp(ui = ui, server = server)
runApp('GitHub/wildfires/CalWildfireDownload')
runApp('GitHub/wildfires/CalWildfireDownload')
